generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite" // Define que la base de datos utilizada será SQLite
  url      = env("TURSO_DATABASE_URL") // Obtiene la URL de conexión de una variable de entorno
}

model tbadds {
  PK_add      Int       @id @default(autoincrement()) // Clave primaria autoincrementable
  title       String
  image       String
  url         String
  button      String
  description String
  status      Boolean   @default(true) // Indica si el privilegio está activo o no
  createdAt   DateTime  @default(now()) // Fecha de creación con valor por defecto de la fecha actual
  updatedAt   DateTime? // Fecha de actualización, puede ser nula
}

model tbprivileges {
  PK_privilege Int       @id @default(autoincrement()) // Clave primaria autoincrementable
  privilege    String    @unique // Nombre del privilegio, debe ser único
  status       Boolean   @default(true) // Indica si el privilegio está activo o no
  createdAt    DateTime  @default(now()) // Fecha de creación con valor por defecto de la fecha actual
  updatedAt    DateTime? // Fecha de actualización, puede ser nula
  tbusers      tbusers[] // Relación con los usuarios que tienen este privilegio
}

model tbusers {
  PK_user      Int          @id @default(autoincrement()) // Clave primaria autoincrementable
  FK_privilege Int // Clave foránea que referencia el privilegio del usuario
  firstName    String // Nombre del usuario
  lastName     String // Apellido del usuario
  phoneNumber  String? // Número de teléfono opcional
  email        String       @unique // Correo electrónico único
  blockedUntil DateTime? // Fecha hasta la cual el usuario está bloqueado (opcional)
  password     String // Contraseña del usuario
  profileImage String? // Imagen de perfil del usuario (opcional)
  lastLogin    DateTime? // Última fecha de inicio de sesión
  status       Boolean      @default(true) // Estado del usuario (activo o inactivo)
  createdAt    DateTime     @default(now()) // Fecha de creación
  updatedAt    DateTime? // Fecha de actualización (puede ser nula)
  tbprivileges tbprivileges @relation(fields: [FK_privilege], references: [PK_privilege]) // Relación con la tabla de privilegios
}

model tbfares {
  PK_fare     Int           @id @default(autoincrement()) // Clave primaria autoincrementable
  userType    String // Tipo de usuario al que aplica la tarifa
  amount      Float // Monto de la tarifa
  status      Boolean       @default(true) // Estado de la tarifa (activa o inactiva)
  createdAt   DateTime      @default(now()) // Fecha de creación
  updatedAt   DateTime? // Fecha de actualización
  tbpassenger tbpassenger[] // Relación con los pasajeros que tienen esta tarifa asignada
}

model tbpassenger {
  PK_passenger    Int               @id @default(autoincrement()) // Clave primaria autoincrementable
  FK_fare         Int // Clave foránea que referencia la tarifa del pasajero
  firstName       String // Nombre del pasajero
  lastName        String // Apellido del pasajero
  email           String            @unique // Correo electrónico único (opcional)
  password        String // Contraseña del pasajero (opcional)
  CI              String?           @unique // Cédula de identidad del pasajero (única)
  phone           String? // Número de teléfono opcional
  profileImage    String? // Imagen de perfil opcional
  birthDate       String? // Fecha de nacimiento del pasajero
  address         String? // Dirección del pasajero (opcional)
  gender          String? // Género del pasajero
  status          Boolean           @default(true) // Estado del pasajero (activo o inactivo)
  createdAt       DateTime          @default(now()) // Fecha de creación
  updatedAt       DateTime? // Fecha de actualización
  tbfares         tbfares           @relation(fields: [FK_fare], references: [PK_fare]) // Relación con la tabla de tarifas
  tbcomplaints    tbcomplaints[] // Relación con las denuncias hechas por el pasajero
  tbnotifications tbnotifications[]
}

model tbstatuscomplaints {
  PK_status    Int            @id @default(autoincrement()) // Clave primaria autoincrementable
  statusName   String         @unique // Nombre del estado de la denuncia (único)
  description  String // Descripción del estado de la denuncia
  createdAt    DateTime       @default(now()) // Fecha de creación
  updatedAt    DateTime? // Fecha de actualización
  tbcomplaints tbcomplaints[] // Relación con las denuncias que tienen este estado
}

model tbtransportline {
  PK_transport   Int       @id @default(autoincrement()) // Clave primaria autoincrementable
  name           String // Nombre único de la línea de transporte
  route          String? // Ruta que sigue la línea de transporte (opcional)
  association    String? // Ruta que sigue la línea de transporte (opcional)
  representative String? // Nombre del conductor principal o responsable (opcional)
  contactNumber  String? // Número de contacto de la línea de transporte (opcional)
  startLocation  String? // Ubicación de inicio de la línea de transporte (opcional)
  endLocation    String? // Ubicación final de la línea de transporte (opcional)
  description    String? // Descripción opcional de la línea de transporte
  status         Boolean   @default(true) // Estado (activo o inactivo) de la línea de transporte
  createdAt      DateTime  @default(now()) // Fecha de creación de la línea
  updatedAt      DateTime? // Fecha de la última actualización (opcional)

  tbcomplaints tbcomplaints[] // Relación con las denuncias asociadas a esta línea de transporte
}

model tbcomplaints {
  PK_complaint       Int                @id @default(autoincrement()) // Clave primaria autoincrementable
  FK_passenger       Int // Clave foránea que referencia al pasajero que hizo la denuncia
  FK_status          Int // Clave foránea que referencia el estado de la denuncia
  FK_transport       Int? // Clave foránea que referencia a la línea de transporte involucrada
  transportLine      String // Línea de transporte involucrada en la denuncia
  vehiclePlate       String // Placa del vehículo denunciado
  violations         String // Tipo de incidencia debe ser guardado en un 
  incidentRelation   String // Relación del incidente con el pasajero
  description        String? // Descripción detallada del incidente
  image              String? // Imagen de evidencia opcional
  status             Boolean            @default(true) // Estado de la denuncia (activa o inactiva)
  createdAt          DateTime           @default(now()) // Fecha de creación
  updatedAt          DateTime? // Fecha de actualización
  passenger          tbpassenger        @relation(fields: [FK_passenger], references: [PK_passenger]) // Relación con el pasajero que hizo la denuncia
  tbstatuscomplaints tbstatuscomplaints @relation(fields: [FK_status], references: [PK_status]) // Relación con el estado de la denuncia
  tbtransportline    tbtransportline?   @relation(fields: [FK_transport], references: [PK_transport]) // Relación con la línea de transporte
}

model tbnotifications {
  PK_notification Int     @id @default(autoincrement()) // Clave primaria autoincrementable
  FK_passenger    Int // Clave foránea que referencia al pasajero al que va dirigida la notificación
  title           String // Título de la notificación
  message         String // Mensaje de la notificación
  actionUrl       String? // URL de acción asociada con la notificación (enlace para actualizar la app)
  isRead          Boolean @default(false) // Indica si la notificación ha sido leída
  createdAt   DateTime    @default(now()) // Fecha de creación de la notificación
  updatedAt   DateTime? // Fecha de actualización, opcional
  tbpassenger tbpassenger @relation(fields: [FK_passenger], references: [PK_passenger]) // Relación con el pasajero
}
